{
  "generatedAt": "2025-08-29T00:00:00Z",
  "summary": "Compact per-file index for EasyTicket client (paths + short summaries, ~1-2 lines each). Includes SportStock & Netra API references and TanStack mapping guidance.",
  "files": {
    "src/app/layout.tsx": "Main app layout for Next.js App Router; includes global providers and site chrome.",
    "src/app/page.tsx": "Homepage entry; composes Hero section and landing content.",
    "src/app/globals.css": "Global CSS for the app (Tailwind + custom overrides).",
    "src/app/favicon.ico": "Site favicon used by the app.",
    "src/app/dashboard/page.tsx": "Dashboard landing page (protected); composes dashboard layout and widgets.",
    "src/app/(auth)/login/page.tsx": "Auth login page — form and redirect logic.",
    "src/app/(auth)/register/page.tsx": "Auth registration page — collects user info and posts to auth endpoint.",

    "src/components/home/HeroSearch.tsx": "Hero search component used on the landing page; composes `SearchForm` and variant tabs.",
    "src/components/home/Steps.tsx": "Landing page step highlights and benefits component.",
    "src/components/forms/SearchForm.tsx": "Search form used by HeroSearch; handles origin/destination, date, passenger counts and submission.",

    "src/components/ui/badge.tsx": "Small status badge used across UI to show counts or states.",
    "src/components/ui/button.tsx": "Primary button wrapper with variants and styling.",
    "src/components/ui/calendar.tsx": "Small calendar UI used by date pickers.",
    "src/components/ui/card.tsx": "Card component for content grouping and layout.",
    "src/components/ui/command.tsx": "Command palette or quick action UI pattern.",
    "src/components/ui/CustomDropdown.tsx": "Generic dropdown wrapper for custom selects.",
    "src/components/ui/C_Input.tsx": "Controlled input component with label and validation helpers.",
    "src/components/ui/C_Select.tsx": "Controlled select wrapper used in forms.",
    "src/components/ui/DatePicker.tsx": "Date picker component integrated with form inputs.",
    "src/components/ui/dialog.tsx": "Modal/dialog wrapper for confirmations and forms.",
    "src/components/ui/dropdown-menu.tsx": "Dropdown menu primitive for action lists.",
    "src/components/ui/form.tsx": "Form layout helpers and wrappers for react-hook-form usage.",
    "src/components/ui/input.tsx": "Basic input control used broadly across forms.",
    "src/components/ui/label.tsx": "Accessible label component for form controls.",
    "src/components/ui/LocationCombobox.tsx": "Location picker combobox used for origin/destination inputs.",
    "src/components/ui/Logo.tsx": "SVG EasyTicket bus wordmark component.",
    "src/components/ui/popover.tsx": "Popover primitive for tooltips and small overlays.",
    "src/components/ui/select.tsx": "Select primitive for single/multi selects.",
    "src/components/ui/separator.tsx": "Visual separator for menus and sections.",
    "src/components/ui/sheet.tsx": "Slide-over panel used for side drawers.",
    "src/components/ui/sidebar.tsx": "Sidebar layout used in dashboard pages.",
    "src/components/ui/skeleton.tsx": "Loading skeletons for lists and cards.",
    "src/components/ui/table.tsx": "Reusable table component for tabular data.",
    "src/components/ui/tabs.tsx": "Tabs primitive for segmented content.",
    "src/components/ui/textarea.tsx": "Textarea control for multi-line input.",
    "src/components/ui/theme-toggle.tsx": "Theme toggle switch to change dark/light modes.",
    "src/components/ui/tooltip.tsx": "Tooltip primitive for short helper text.",

    "src/components/examples/empty-state.tsx": "Example UI components and small reusable patterns used in dashboard or examples.",
    "src/components/providers/ThemeProvider.tsx": "Top-level theming provider used by the app (wraps shadcn or Tailwind theme utilities).",

    "src/services/authService.ts": "Client auth service that calls backend `/auth/login` and `/auth/register` using the shared axios `apiClient`.",
    "src/lib/utils.ts": "Helper utilities used across the client (formatters, small helpers).",

    "server/Easy_Ticket_Server/prisma/schema.prisma": "Prisma schema for server-side data models; canonical API contract reference.",
    "README.md": "Project README with high-level instructions and notes.",
    "FRONTEND_REQUIREMENTS.md": "Frontend requirements and planning doc present at repo root.",
    "project-index.json": "Full project tree snapshot (shallow) saved earlier.",
    "project-index-compact.json": "This compact index file; contains per-file short summaries for quick lookup.",
    "project-index-README.md": "Documentation explaining how to reuse the project index snapshot.",
    "public/Hero_background_image.png": "Hero background image asset used by landing HeroSearch component.",

    "reference/Netra_Health_Care_Client/src/helpers/axios/axiosInstance.ts": "Axios instance configured with interceptors for auth and token refresh; central HTTP client.",
    "reference/Netra_Health_Care_Client/src/helpers/axios/axiosBaseQuery.ts": "Axios baseQuery adapter used by RTK `baseApi` — wraps `axiosInstance` and normalizes responses/errors.",
    "reference/Netra_Health_Care_Client/src/redux/api/baseApi.ts": "RTK `baseApi` that uses `axiosBaseQuery` to centralize base URL and headers.",
    "reference/Netra_Health_Care_Client/src/utils/apiBuilders.ts": "Utility `createApiBuilder` used across Netra APIs to declare endpoints with consistent patterns and tag usage.",
    "reference/Netra_Health_Care_Client/src/redux/api/*.ts": "Multiple API files (authApi, doctorsApi, appointmentApi...) that use `createApiBuilder` and demonstrate consistent endpoint definitions and tag-based cache invalidation.",

    "reference/SPORTSTOCK_inventory_managemen/SportStock_client/src/utls/api.ts": "API builder helpers (endpoint builders) used to construct RTK Query endpoints; handles create, update, query, singleQuery, delete patterns.",
    "reference/SPORTSTOCK_inventory_managemen/SportStock_client/src/redux/api/baseApi.ts": "RTK Query `baseApi` (common base) used to define endpoints; used by `productApi`, `stockApi`, `userApi`, `adminApi`, `authApi`.",
    "reference/SPORTSTOCK_inventory_managemen/SportStock_client/src/redux/api/stockApi.ts": "Stock-related endpoints (getAllStocks, getBranchStocks, adjustStock, transfer); used heavily by stock management pages.",
    "reference/SPORTSTOCK_inventory_managemen/SportStock_client/src/redux/api/productApi.ts": "Product endpoints (getProducts, getSingleProduct, createProduct, updateProduct); used by product pages and variant creation.",
    "reference/SPORTSTOCK_inventory_managemen/SportStock_client/src/redux/api/userApi.ts": "User endpoints (getAllUsers, getUserById, create/update user roles); used by user management pages.",
    "reference/SPORTSTOCK_inventory_managemen/SportStock_client/src/redux/api/adminApi.ts": "Admin endpoints (getAllBranches, admin-specific admin-level data); referenced across admin pages.",
    "reference/SPORTSTOCK_inventory_managemen/SportStock_client/src/redux/api/authApi.ts": "Auth endpoints (getMe, login/logout, refresh) used by ProtectedRoutes and auth flows.",
    "reference/SPORTSTOCK_inventory_managemen/SportStock_client/src/redux/Store.ts": "Redux store wiring that adds `baseApi.reducerPath` and `baseApi.middleware` to the store; important for RTK Query integration.",
    "reference/SPORTSTOCK_inventory_managemen/SportStock_client/src/pages/*": "Multiple pages import hooks like `useGetProductsQuery`, `useGetAllUsersQuery`, `useGetAllBranchesQuery` — good examples of consuming RTK Query hooks in components.",

    "reference/SPORTSTOCK_inventory_managemen/SportStock_client/tanstack_guidance.md": "Guidance (generated) mapping RTK Query patterns from SportStock to TanStack Query equivalents (see top-level `tanstackMapping` below)."
  },

  "tanstackMapping": {
    "patternSummary": "How to translate RTK Query endpoints/hooks to TanStack Query (useQuery/useMutation + queryClient)",
    "examples": {
      "query": {
        "rtk": "useGetProductsQuery(params)",
        "tanstack": "useQuery(['products', params], () => api.get('/products', { params }).then(r => r.data))"
      },
      "singleQuery": {
        "rtk": "useGetuserByIdQuery(userId)",
        "tanstack": "useQuery(['user', userId], () => api.get(`/users/${userId}`).then(r => r.data), { enabled: !!userId })"
      },
      "mutation": {
        "rtk": "useCreateProductMutation()",
        "tanstack": "useMutation((payload) => api.post('/products', payload).then(r => r.data), { onSuccess: () => queryClient.invalidateQueries(['products']) })"
      },
      "cacheInvalidation": "RTK Query uses tags; replicate with `queryClient.invalidateQueries(['products'])` or more specific keys after mutations in TanStack.",
      "baseApi": "RTK `baseApi` centralizes fetch and headers; replicate with a shared `api` client (axios/fetch wrapper) and reuse it in TanStack fetchers. Keep auth refresh logic in the client or use interceptors."
    }
  },

  "netraTanstackGuidance": {
  "overview": "Netra uses an axiosInstance + axiosBaseQuery + createApiBuilder to keep endpoints consistent and handle auth; replicate with a shared Axios client + TanStack fetchers and a set of small reusable fetch/mutation hooks.",
    "sampleApiClient": "Create `src/lib/apiClient.ts` that exports an axios instance with interceptors for Authorization and refresh handling (copy axiosInstance pattern).",
    "sampleTanstackHooks": {
      "useProducts": "useQuery(['products', params], () => apiClient.get('/products', { params }).then(r => r.data))",
      "useCreateProduct": "useMutation((payload) => apiClient.post('/products', payload).then(r => r.data), { onSuccess: () => queryClient.invalidateQueries(['products']) })",
      "helperPattern": "Create small factory helpers `makeQueryKey('products')` and `makeFetcher(path)` to keep hooks consistent and DRY, similar to `createApiBuilder`."
    }
  }
}
